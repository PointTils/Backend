name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Permite execução manual da pipeline

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Grant execute permission to mvnw
      run: chmod +x pointtils/mvnw

    - name: Build with Maven
      run: |
        cd pointtils
        ./mvnw clean package -DskipTests
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check if ECR repository exists and create if needed
      run: |
        exists=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} 2>/dev/null || echo "false")
        if [ "$exists" = "false" ]; then
          echo "Creating ECR repository ${{ secrets.ECR_REPOSITORY }}"
          aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --image-tag-mutability MUTABLE --image-scanning-configuration scanOnPush=true
        else
          echo "ECR repository ${{ secrets.ECR_REPOSITORY }} already exists"
        fi

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd pointtils
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create SSH key file
      run: |
        mkdir -p ./terraform
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ./terraform/pointtils_key.pub

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Create terraform.tfvars file
      run: |
        cat > terraform/terraform.tfvars << EOF
        aws_region     = "${{ secrets.AWS_REGION }}"
        db_username    = "${{ secrets.DB_USERNAME }}"
        db_password    = "${{ secrets.DB_PASSWORD }}"
        EOF

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: terraform
      id: terraform-apply
      continue-on-error: true  # Continuar mesmo se houver erro
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform outputs
      working-directory: terraform
      id: terraform-outputs
      run: |
        # Diagnóstico para entender o que está disponível
        echo "=== Terraform Outputs Disponíveis ==="
        terraform output || echo "Nenhum output disponível"
        
        # Configurar IP para a aplicação
        echo "=== Obtendo IP da instância EC2 ==="
        # Buscar instância EC2 pelo nome
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=pointtils-app" --query 'Reservations[*].Instances[*].InstanceId' --output text)
        
        if [ -n "$INSTANCE_ID" ]; then
          echo "Instance ID encontrado: $INSTANCE_ID"
          
          # Buscar Elastic IP associado
          INSTANCE_IP=$(aws ec2 describe-addresses --filters "Name=instance-id,Values=$INSTANCE_ID" --query 'Addresses[0].PublicIp' --output text || echo "")
          
          # Se não tem Elastic IP, usar o IP público da instância
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "None" ]; then
            echo "Elastic IP não encontrado, usando IP público direto da instância"
            INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text || echo "")
          fi
          
          # Limpar o IP (remover aspas e espaços)
          CLEAN_IP=$(echo "$INSTANCE_IP" | tr -d '"' | tr -d ' ')
          echo "IP encontrado: $CLEAN_IP"
          
          # Verificar se o IP tem formato válido
          if [[ "$CLEAN_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "IP válido: $CLEAN_IP"
            echo "app_ip=$CLEAN_IP" >> $GITHUB_OUTPUT
          else
            echo "AVISO: Formato de IP inválido ($CLEAN_IP), usando placeholder"
            echo "app_ip=127.0.0.1" >> $GITHUB_OUTPUT
          fi
        else
          echo "Nenhuma instância encontrada, usando IP placeholder"
          echo "app_ip=127.0.0.1" >> $GITHUB_OUTPUT
        fi
        
        # Buscar bucket S3
        echo "=== Buscando bucket S3 ==="
        BUCKET_NAME=$(aws s3api list-buckets --query 'Buckets[?starts_with(Name, `pointtils-api-tests-`)].Name' --output text || echo "")
        
        if [ -n "$BUCKET_NAME" ]; then
          echo "Bucket S3 encontrado: $BUCKET_NAME"
          echo "s3_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
        else
          echo "Nenhum bucket S3 encontrado, usando nome padrão"
          echo "s3_bucket=pointtils-api-tests-default" >> $GITHUB_OUTPUT
        fi
        
        # Obter URL do ECR
        echo "ecr_repo=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
        
        # Verificar os valores definidos
        echo "=== Valores definidos ==="
        cat $GITHUB_OUTPUT

    - name: Verify EC2 host availability
      run: |
        HOST_IP="${{ steps.terraform-outputs.outputs.app_ip }}"
        
        if [ "$HOST_IP" = "127.0.0.1" ]; then
          echo "Usando IP placeholder (127.0.0.1), pulando verificação de SSH"
          echo "HOST_READY=false" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "Verificando disponibilidade do host: $HOST_IP"
        # Instalar netcat se necessário
        sudo apt-get update -y && sudo apt-get install -y netcat-openbsd
        # Aguardar um tempo para garantir que a instância esteja pronta
        echo "Aguardando 60 segundos para inicialização da instância..."
        sleep 60
        
        # Tentar conectar várias vezes com um timeout
        for i in {1..12}; do
          if nc -z -v -w5 $HOST_IP 22; then
            echo "Host disponível para SSH"
            echo "HOST_READY=true" >> $GITHUB_ENV
            break
          else
            echo "Tentativa $i: SSH ainda não disponível. Aguardando..."
            sleep 15
          fi
          
          if [ $i -eq 12 ]; then
            echo "AVISO: Host não respondeu após 12 tentativas, mas vamos continuar mesmo assim"
            echo "HOST_READY=false" >> $GITHUB_ENV
          fi
        done

    - name: Check IP Address
      run: |
        IP_ADDRESS="${{ steps.terraform-outputs.outputs.app_ip }}"
        echo "Endereço IP a ser usado para SSH: $IP_ADDRESS"
        if [ "$IP_ADDRESS" = "127.0.0.1" ]; then
          echo "AVISO: Usando IP placeholder (127.0.0.1) - a implantação não será concluída"
          echo "HOST_READY=false" >> $GITHUB_ENV
        fi

    - name: Deploy application to EC2
      if: steps.terraform-outputs.outputs.app_ip != '127.0.0.1' && env.HOST_READY == 'true'
      uses: appleboy/ssh-action@master
      continue-on-error: true  # Continuar mesmo se houver falha na conexão SSH
      id: ssh-deploy
      with:
        host: ${{ steps.terraform-outputs.outputs.app_ip }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        command_timeout: "30m"
        script_stop: false
        script: |
          echo "=== Iniciando deploy na instância EC2 ==="
          
          # Verificar se o Docker está instalado
          docker --version
          if [ $? -ne 0 ]; then
            echo "Docker não está instalado corretamente"
            exit 1
          fi
          
          # Instalar e configurar AWS CLI
          echo "=== Instalando AWS CLI ==="
          sudo apt-get update -y
          sudo apt-get install -y awscli python3-pip
          
          # Verificar instalação da AWS CLI
          aws --version || {
            echo "AWS CLI não está instalado, tentando com pip3"
            pip3 install --user awscli
            export PATH=$PATH:$HOME/.local/bin
            aws --version || {
              echo "Falha ao instalar AWS CLI"
              exit 1
            }
          }
          
          # Configurar AWS CLI com as credenciais
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << AWSCREDS
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=${{ secrets.AWS_REGION }}
          AWSCREDS
          
          # Criar diretório para a aplicação
          mkdir -p ~/pointtils
          
          # Criar arquivo docker-compose.yml
          cat > ~/pointtils/docker-compose.yml << EOF
          version: '3'
          services:
            app:
              image: ${{ steps.build-image.outputs.image }}
              ports:
                - "8080:8080"
              environment:
                - SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/pointtilsdb
                - SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
                - SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
                - S3_BUCKET_NAME=${{ steps.terraform-outputs.outputs.s3_bucket }}
                - AWS_REGION=${{ secrets.AWS_REGION }}
                - AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
                - AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
              restart: always
              network_mode: "host"  # Usar modo de rede host para facilitar conexão com PostgreSQL local
          EOF
          
          # Login no ECR
          echo "=== Fazendo login no ECR ==="
          ECR_URL="${{ steps.terraform-outputs.outputs.ecr_repo }}"
          ECR_REGISTRY="${ECR_URL%/*}"
          
          # Garantir que o login seja feito de forma não interativa
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} > ~/.ecr_password
          cat ~/.ecr_password | docker login --username AWS --password-stdin $ECR_REGISTRY
          rm -f ~/.ecr_password
          
          echo "=== Verificando login no ECR ==="
          docker info | grep Registry || echo "Aviso: Registro não encontrado"
          
          # Parar contêineres anteriores, se existirem
          echo "=== Parando contêineres anteriores ==="
          cd ~/pointtils
          docker-compose down || true
          
          # Iniciar a aplicação
          echo "=== Iniciando a aplicação ==="
          echo "Baixando imagem: ${{ steps.build-image.outputs.image }}"
          docker pull ${{ steps.build-image.outputs.image }} || {
            echo "Falha ao baixar imagem, tentando novamente com login manual"
            echo "URL do ECR: $ECR_REGISTRY"
            docker logout
            aws ecr get-login --no-include-email --region ${{ secrets.AWS_REGION }} | bash
            docker pull ${{ steps.build-image.outputs.image }} || {
              echo "ERRO: Não foi possível baixar a imagem do ECR"
              exit 1
            }
          }
          
          docker-compose up -d
          
          # Verificar se o contêiner está em execução
          echo "=== Verificando status do contêiner ==="
          docker ps
          
          # Verificar status do PostgreSQL
          echo "=== Verificando status do PostgreSQL ==="
          sudo systemctl status postgresql
          
          # Verificar se o banco de dados foi criado
          echo "=== Verificando banco de dados ==="
          sudo -u postgres psql -c "\\l" | grep pointtilsdb
          
          # Verificar logs do contêiner para debugging
          echo "=== Logs da aplicação ==="
          sleep 10  # Aguardar alguns segundos para inicialização
          docker-compose logs app
          
          # Verificar se o contêiner está em execução
          echo "=== Verificando se o contêiner está em execução ==="
          CONTAINER_RUNNING=$(docker ps | grep pointtils | grep -i up)
          if [ -z "$CONTAINER_RUNNING" ]; then
            echo "AVISO: Contêiner não parece estar em execução"
            docker ps -a
          else
            echo "Contêiner em execução: $CONTAINER_RUNNING"
          fi
          
          # Testar se a aplicação está respondendo
          echo "=== Testando acesso à aplicação ==="
          MAX_ATTEMPTS=12
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Tentativa $i de $MAX_ATTEMPTS..."
            if curl -sI --connect-timeout 5 localhost:8080 | grep -q "HTTP/"; then
              echo "✅ Aplicação respondendo corretamente!"
              APP_RUNNING=true
              break
            else
              echo "Aplicação ainda não está respondendo. Aguardando..."
              sleep 10
            fi
          done
          
          if [ "$APP_RUNNING" != "true" ]; then
            echo "⚠️ Aplicação não respondeu após $MAX_ATTEMPTS tentativas"
            echo "Logs do contêiner:"
            docker-compose logs --tail 50 app
          fi
          
          echo "=== Deploy concluído ==="

    - name: Deployment Summary
      run: |
        echo "======================================"
        if [ "${{ env.HOST_READY }}" == "true" ]; then
          echo "✅ Deployment completed successfully!"
        elif [ "${{ steps.terraform-outputs.outputs.app_ip }}" == "127.0.0.1" ]; then
          echo "⚠️ Infrastructure deployment incomplete - could not retrieve valid IP"
        else
          echo "⚠️ Deployment may have issues - host was not ready for SSH"
        fi
        echo "======================================"
        
        if [ "${{ steps.terraform-outputs.outputs.app_ip }}" != "127.0.0.1" ]; then
          echo "Application URL: http://${{ steps.terraform-outputs.outputs.app_ip }}:8080"
          echo "SSH Access: ssh ubuntu@${{ steps.terraform-outputs.outputs.app_ip }}"
        else
          echo "Application URL: Not available (deployment incomplete)"
          echo "SSH Access: Not available (deployment incomplete)"
        fi
        
        echo "ECR Repository: ${{ steps.terraform-outputs.outputs.ecr_repo }}"
        echo "S3 Bucket: ${{ steps.terraform-outputs.outputs.s3_bucket }}"
        echo "======================================"
        
        if [ "${{ env.HOST_READY }}" == "true" ]; then
          echo "Para verificar logs da aplicação:"
          echo "ssh ubuntu@${{ steps.terraform-outputs.outputs.app_ip }} 'cd ~/pointtils && docker-compose logs'"
        fi
        echo "======================================"
