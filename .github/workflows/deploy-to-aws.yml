name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Permite execução manual da pipeline

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Grant execute permission to mvnw
      run: chmod +x pointtils/mvnw

    - name: Build with Maven
      run: |
        cd pointtils
        ./mvnw clean package -DskipTests
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check if ECR repository exists and create if needed
      run: |
        exists=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} 2>/dev/null || echo "false")
        if [ "$exists" = "false" ]; then
          echo "Creating ECR repository ${{ secrets.ECR_REPOSITORY }}"
          aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --image-tag-mutability MUTABLE --image-scanning-configuration scanOnPush=true
        else
          echo "ECR repository ${{ secrets.ECR_REPOSITORY }} already exists"
        fi

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd pointtils
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create SSH key file
      run: |
        mkdir -p ./terraform
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ./terraform/pointtils_key.pub

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Create terraform.tfvars file
      run: |
        cat > terraform/terraform.tfvars << EOF
        aws_region     = "${{ secrets.AWS_REGION }}"
        db_username    = "${{ secrets.DB_USERNAME }}"
        db_password    = "${{ secrets.DB_PASSWORD }}"
        EOF

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: terraform
      id: terraform-apply
      continue-on-error: true  # Continuar mesmo se houver erro
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform outputs
      working-directory: terraform
      id: terraform-outputs
      run: |
        # Diagnóstico para entender o que está disponível
        echo "=== Terraform Outputs Disponíveis ==="
        terraform output || echo "Nenhum output disponível"
        
        # Tratamento mais robusto para evitar erro EPIPE
        echo "=== Processando app_instance_public_ip ==="
        terraform output app_instance_public_ip > /tmp/instance_ip.txt || echo "Não foi possível obter app_instance_public_ip"
        if [ -s /tmp/instance_ip.txt ]; then
          INSTANCE_IP=$(cat /tmp/instance_ip.txt | tr -d '"' || echo "")
          echo "IP da instância via terraform output: $INSTANCE_IP"
          echo "app_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        else
          echo "Output app_instance_public_ip não encontrado, buscando via AWS CLI"
          # Buscar o IP manualmente
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=pointtils-app" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          echo "Instance ID encontrado: $INSTANCE_ID"
          
          # Buscar Elastic IP associado
          INSTANCE_IP=$(aws ec2 describe-addresses --filters "Name=instance-id,Values=$INSTANCE_ID" --query 'Addresses[0].PublicIp' --output text)
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "None" ]; then
            echo "Elastic IP não encontrado, usando IP público direto da instância"
            INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          fi
          
          echo "IP final encontrado: $INSTANCE_IP"
          echo "app_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        fi
        
        echo "=== Processando s3_bucket_name ==="
        terraform output s3_bucket_name > /tmp/bucket_name.txt || echo "Não foi possível obter s3_bucket_name"
        if [ -s /tmp/bucket_name.txt ]; then
          BUCKET_NAME=$(cat /tmp/bucket_name.txt | tr -d '"' || echo "")
          echo "s3_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
        else
          echo "Output s3_bucket_name não encontrado, buscando via AWS CLI"
          BUCKET_NAME=$(aws s3api list-buckets --query 'Buckets[?starts_with(Name, `pointtils-api-tests-`)].Name' --output text)
          echo "s3_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
        fi
        
        # Obter URL do ECR
        echo "ecr_repo=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
        
        # Verificar se o app_ip está definido corretamente
        echo "Valores de outputs definidos:"
        cat $GITHUB_OUTPUT

    - name: Verify EC2 host availability
      run: |
        echo "Verificando disponibilidade do host: ${{ steps.terraform-outputs.outputs.app_ip }}"
        # Instalar netcat se necessário
        sudo apt-get update -y && sudo apt-get install -y netcat-openbsd
        # Aguardar um tempo para garantir que a instância esteja pronta
        echo "Aguardando 60 segundos para inicialização da instância..."
        sleep 60
        # Tentar verificar se a porta 22 está aberta (com tratamento de erro)
        HOST_IP="${{ steps.terraform-outputs.outputs.app_ip }}"
        if [[ ! "$HOST_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "ERRO: Endereço IP inválido: $HOST_IP"
          echo "Tentando descobrir IP via AWS CLI..."
          HOST_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=pointtils-app" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "IP recuperado via AWS CLI: $HOST_IP"
        fi
        
        if [[ "$HOST_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Verificando se a porta 22 está aberta no IP $HOST_IP"
          for i in {1..10}; do
            if nc -z -v -w5 $HOST_IP 22; then
              echo "Host disponível para SSH"
              break
            else
              echo "Tentativa $i: SSH ainda não disponível. Aguardando..."
              sleep 10
            fi
            if [ $i -eq 10 ]; then
              echo "AVISO: Host não respondeu após 10 tentativas, mas vamos continuar mesmo assim"
            fi
          done
        else
          echo "ERRO: Não foi possível determinar um endereço IP válido."
          exit 1
        fi

    - name: Check IP Address
      run: |
        IP_ADDRESS="${{ steps.terraform-outputs.outputs.app_ip }}"
        echo "Endereço IP a ser usado para SSH: $IP_ADDRESS"
        if [[ ! "$IP_ADDRESS" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "ERRO: Formato de IP inválido: $IP_ADDRESS"
          IP_ADDRESS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=pointtils-app" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "IP_ALTERNATIVO=$IP_ADDRESS" >> $GITHUB_ENV
          echo "Tentando usar IP alternativo: $IP_ADDRESS"
        fi

    - name: Deploy application to EC2
      uses: appleboy/ssh-action@master
      continue-on-error: true  # Continuar mesmo se houver falha na conexão SSH
      id: ssh-deploy
      with:
        host: ${{ env.IP_ALTERNATIVO || steps.terraform-outputs.outputs.app_ip }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        command_timeout: "30m"
        script_stop: false
        script: |
          echo "=== Iniciando deploy na instância EC2 ==="
          
          # Verificar se o Docker está instalado
          docker --version
          if [ $? -ne 0 ]; then
            echo "Docker não está instalado corretamente"
            exit 1
          fi
          
          # Criar diretório para a aplicação
          mkdir -p ~/pointtils
          
          # Criar arquivo docker-compose.yml
          cat > ~/pointtils/docker-compose.yml << EOF
          version: '3'
          services:
            app:
              image: ${{ steps.build-image.outputs.image }}
              ports:
                - "8080:8080"
              environment:
                - SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/pointtilsdb
                - SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
                - SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
                - S3_BUCKET_NAME=${{ steps.terraform-outputs.outputs.s3_bucket }}
                - AWS_REGION=${{ secrets.AWS_REGION }}
              restart: always
          EOF
          
          # Login no ECR
          echo "=== Fazendo login no ECR ==="
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Parar contêineres anteriores, se existirem
          echo "=== Parando contêineres anteriores ==="
          cd ~/pointtils
          docker-compose down || true
          
          # Iniciar a aplicação
          echo "=== Iniciando a aplicação ==="
          docker-compose pull
          docker-compose up -d
          
          # Verificar se o contêiner está em execução
          echo "=== Verificando status do contêiner ==="
          docker ps
          
          # Verificar status do PostgreSQL
          echo "=== Verificando status do PostgreSQL ==="
          sudo systemctl status postgresql
          
          # Verificar se o banco de dados foi criado
          echo "=== Verificando banco de dados ==="
          sudo -u postgres psql -c "\\l" | grep pointtilsdb
          
          # Verificar logs do contêiner para debugging
          echo "=== Logs da aplicação ==="
          sleep 10  # Aguardar alguns segundos para inicialização
          docker-compose logs app
          
          # Testar se a aplicação está respondendo
          echo "=== Testando acesso à aplicação ==="
          curl -I localhost:8080
          
          echo "=== Deploy concluído ==="

    - name: Deployment Summary
      run: |
        echo "======================================"
        echo "✅ Deployment completed successfully!"
        echo "======================================"
        echo "Application URL: http://${{ steps.terraform-outputs.outputs.app_ip }}:8080"
        echo "SSH Access: ssh ubuntu@${{ steps.terraform-outputs.outputs.app_ip }}"
        echo "ECR Repository: ${{ steps.terraform-outputs.outputs.ecr_repo }}"
        echo "S3 Bucket: ${{ steps.terraform-outputs.outputs.s3_bucket }}"
        echo "======================================"
        echo "Para verificar logs da aplicação:"
        echo "ssh ubuntu@${{ steps.terraform-outputs.outputs.app_ip }} 'cd ~/pointtils && docker-compose logs'"
        echo "======================================"
